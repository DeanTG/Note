浏览器的主要构成：
　　1. 用户界面 － 包括地址栏、后退/前进按钮、书签目录等，除了用来显示你所请求页面的主窗口之外的其他部分。
　　2. 浏览器引擎 － 用来查询及操作渲染引擎的接口。
　　3. 渲染引擎 － 用来显示请求的内容，例如，如果请求内容为html，它负责解析html及css，并将解析后的结果显示出来。
　　4. 网络 － 用来完成网络调用，例如http请求，它具有平台无关的接口，可以在不同平台上工作。
　　5. UI后端 － 用来绘制类似组合选择框及对话框等基本组件，具有不特定于某个平台的通用接口，底层使用操作系统的用户接口。
　　6. JS解释器 － 用来解释执行JS代码。
　　7. 数据存储 － 属于持久层，浏览器需要在硬盘中保存类似cookie的各种数据，HTML5定义了web database技术。

渲染引擎在取得内容之后的基本流程：
　　解析html以构建dom树 -> 构建render树 -> 布局render树 -> 绘制render树


reflow：
	交互效果引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲染。
repaint：
	只是改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性，将只会引起浏览器repaint。



浏览器加载和渲染html的顺序：
	1、IE下载的顺序是从上到下，渲染的顺序也是从上到下，下载和渲染是同时进行的。
	2、在渲染到页面的某一部分时，其上面的所有部分都已经下载完成（并不是说所有相关联的元素都已经下载完）
	3、如果遇到语义解释性的标签嵌入文件（JS脚本，CSS样式），那么此时IE的下载过程会启用单独连接进行下载。
	4、并且在下载后进行解析，解析过程中，停止页面所有往下元素的下载。阻塞加载
	5、样式表在下载完成后，将和以前下载的所有样式表一起进行解析，解析完成后，将对此前所有元素（含以前已经渲染的）重新进行渲染。
	6、JS、CSS中如有重定义，后定义函数将覆盖前定义函数。




js加载：
	并行加载，顺序解析。当引用了JS的时候，浏览器发送1个js request就会一直等待该request的返回。因为浏览器需要1个稳定的DOM树结构，而JS中很有可能有代码直接改变了DOM树结构，比如使用 document.write 或 appendChild,甚至是直接使用的location.href进行跳转，浏览器为了防止出现JS修改DOM树，需要重新构建DOM树的情况，所以 就会阻塞其他的下载和呈现.
css下载：
	并行下载。Firefox在存在样式表还在加载和解析时阻塞所有的脚本，而Chrome只在当脚本试图访问某些可能被未加载的样式表所影响的特定的样式属性时才阻塞这些脚本。

样式文件的加载会阻塞脚本的执行,所以如果你把一个<script>元素放在了一个<link rel="stylesheet" ...>后面,如果页面没有完成解析,则DOMContentLoaded事件不会触发,直到样式文件加载完成之后.






















