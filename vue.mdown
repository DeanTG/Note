
# vue 1.0

## vue实例
    var vm = new Vue({})

> 在实例化Vue时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项

* 每个 Vue 实例都会代理其 data 对象里所有的属性
* 只有这些被代理的属性是响应的。如果在实例创建之后添加新的属性到实例上，它不会触发视图更新

### vue实例方法
* vm.$el 元素
* vm.$data 数据对象
* vm.$mount('') 手动挂载对象
* vm.$options 访问自定义属性
* vm.$log()

### [生命周期](images/lifecycle.png)
#### 钩子函数
* init
* created 实例创建
* beforeCompile 编译之前
* compiled 编译之后
* ready 插入到文档中

#### 销毁阶段 $destroy
* beforeDestroy 销毁之前
* destroyed 销毁之后


## 数据绑定
### 表单控件绑定：v-model

### 插值
> 在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击。只对可信内容使用 HTML 插值，永不用于用户提交的内容。

* {{data}}
* {{*data}} 只绑定一次
* {{{data}}} html转义

### 过滤器
> {{ data | filter 参数 | }}

* filterBy
* orderBy
* limitBy
* debounce 配合事件，延迟执行

#### 自定义过滤器
        Vue.filter(name,function(){})

### 属性
> v-bind: attr = "" 简写:attr

### 事件
> v-on: fn = "" 简写@fn

#### $event
> 通过$event参数访问原生 DOM 事件

#### 事件冒泡、默认事件
* $event.cancelbubble()、$event.preventDefault()
* @fn.stop = ""、@fn.prevent = ""

## 条件渲染：v-show

## 列表渲染：v-for
* 在 v-for 块内我们能完全访问父组件作用域内的属性
* v-for渲染会过滤重复数据，重复数据添加 track-by='索引'，如果没有唯一的键供追踪，可以使用 track-by="$index"
* 使用 v-for 遍历数组，可以通过 $index 访问数组的索引。使用 v-for 遍历对象时，作用域内还可以访问另外一个特殊变量 $key。

> 也可以给对象的键提供一个别名： 
``` 
    <div v-for="(key, val) in object">
      {{ key }} {{ val }}
    </div>
```



## 计算属性computed （等价于ng 的$watch）
``` js
        new Vue({
            computed: {
                a: {
                    get: function(){},
                    set: function(val){}
                }
            }
        })
```

## vue的 $watch 方法
``` js
    vm.$watch(el, funciton(val){}, {deep:true}) 监听数据
```



## 组件
### 自定义组件
1. 全局组件
``` js
       1 var a = Vue.extend({
           template: '<h1>msg</h1>',
           data: funciton(){
            return {
                msg: "hellow vue"
            }
           }
       })  
       Vue.component('aaa', a)

       2 Vue.component('aaa', {
            template: '<h1>msg</h1>'
        })
```

2. 局部组件
```js
       1 var a = Vue.extend({
           template: '<h1>msg</h1>',
           data: funciton(){
            return {
                msg: "hellow vue"
            }
           }
       })  
       new Vue({
            el: ,
            components: {
                aaa: a
            }
        })

        2 new Vue({
            el: ,
            components: {
                aaa: {
                    template: '<h1></h1>'
                }
            }
        })
```

### 动态组件
    <component :is="组件名称"></component>

### 组件之间数据通信
1. 子组件获取父级数据

> 在调用子组件时，`<child :m="数据"></child>`
> 在子组件内：
>       `props: ['m'] 或 props:{'m': String(数据类型)}`

2. 父级获取子组件数据

> 子组件通过this.$emit(name, data)发送数据，

### slot



## 指令
> 扩展的html语法 

### 自定义指令
        Vue.directive(name, function(){
            this.el //原生dom元素
        })

> 自定义指令必须是v-name, 在自定义函数中不加 “v-”


## 交互 vue-resource
* this.$http.get({})
* this.$http.post({})
* this.$http.jsonp({})

``` js
    new Vue({
        methods: {
            methodName: funciton(){
                this.$http({
                    url: ,
                    data: ,
                    method: get/post/jsonp,
                    jsonp: 'cb'
                }).then()
            }
        }
    })
```


## vue-router


# vue 2.0

## 组件定义方式

* template必须有一个根元素


## 生命周期
* beforeCreate 实例刚创建没有属性
* created 属性等已绑定
* beforeMount 模版编译之前
* mounted 
* beforeUpdate
* updated
* beforeDestroy
* destroyed


## 列表渲染：v-for    
* 默认可以添加重复数据
* 必须显示的定义index ` <li v-for="(val,index) in list"></li> `
* ` track-by="索引" 变成了 :key="index `


## 过滤器
* 删除全部内置过滤器，推荐使用lodash
* 自定义过滤器传参方式改变 ` {{data | filterName('参数1','参数2')}} `


## 组件通信

## transition

## router
``` HTML
    <router-link to="routerName"></router-link>
    <router-view></router-view>
```
``` js
    //声明路由组件
    var a = {
        template: ""
    }
    //配置路由
    var routes = [
        {path: "", component: a},
        {path: "*", redirect: "",} //重定向,使用＊重定向必须在所有已有路由分配之后
    ]
    //生成路由
    router = new VueRouter({routes: routes})

    //挂在到vue
    new Vue({
        el: "",
        router: router
    })

```

### 路由嵌套
``` js
    var routes = [
        {
            path: "",
            component: a,
            children: [
                {path: "", component: ""}
            ]
        }
    ]
```

### 路由实例方法
``` js
    var router = new VueRouter({});
    1 router.push();
    2 router.replace();
    3 watch: { //监听路由变化
        $route(to, from){
            //to.path 、 from.path
        }
    }
```

## [Vuex](images/vuex.png)
> 集中管理数据 

### vuex提供的两个方法
* mapGetters 获取数据
* mapActions 管理所有事件

```
    // 首先挂载到vue上 main.js
    import store from 'store.js'
    new Vue({
        store
    })

    // 在组件内通过mapGetters和mapActions获取数据和管理事件 App.vue
    import {mapGetters, mapActions} from 'vuex'
    export default {
        computed: mapGetters[
            'count'
        ],
        methods: mapActions[ // 可以用this.$store.dispatch('eventName')代替
            'eventName'
        ]
    }

    // 在store.js里接受事件和处理数据
    import vue和vuex
    
    const actions = { //接收并处理事件
        eventName: ({commit})=>{
            commit('eventName')
        }
    }

    var state = {
        count: 0
    }
    const mutations = { //处理数据状态变化
        eventName(state){
            state.count ++;
        }
    }
    const getters = { 
        count(state){
            return state.count;
        }
    }
    export default new Vuex.Store({
        actions,
        state,
        mutations,
        getters
    })

```

## axios
```
    //配置axios
    axios.interceptors.request.use(function(config){
        store.dispatch('showLoading');
        return config;
    },function(err){
        return Promise.reject(err);
    })
    axios.interceptors.response.use(function(response){
        store.dispatch('showLoading');
        return response;
    },function(err){
        return Promise.reject(err);
    })
    // axios.defaults.baseURL = ""; //配置请求根路径
     Vue.prototype.$http = axios //替换vue.resource里的this.$http方法
    // axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded' //设置post头部信息
```

