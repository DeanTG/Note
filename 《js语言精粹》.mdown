# js语言精粹


javascript函数是基于次发作用域的顶级对象。
javascript依赖于全局变量来进行连接，所有变一单元的所有顶级变量被撮合到一个被称为全局对象的公共命名空间中。


## 语法
### 标识符
保留字不能作为变量名、对象属性名、参数、语句、运算符。(undefined NaN Infinity不是保留字)

### 数字
javascript只有一个单一的数字类型Number,它在内部被标示为64位的浮点数。  
值NaN是一个数值(isNaN检测数字)

### 字符串
javascript中的所有字符都是16位的（unicode）。

### 语句
缺少链接器，js会把所有雨具抛入一个公共的全局命名空间。

### 表达式

### 字面量
* 对象字面量，属性名可以是标识符或字符串，属性值就是表达式

### 函数
函数的参数将作为变量由调用时传递的实际参数（arguments）初始化。


## 对象
* js的对象是可变的键控集合(keyed collections)
* 对象是属性的容器，属性名可以是包括空字符串在内的任意字符串，属性值可以是处undefined值之外的任何值。
* js中的对象是无类别的(class-free)
* 由对象字面量产生的对象连接到Object.prototype

### 对象字面量
属性名是合法的标识符且不失保留字，可以不用加引号，类似"first-name"才需要使用引号。

### 检索
* 检索一个不存在成员元素的值返回undefined。  
* || 运算符可以用来填充默认值。
* 检索undefined 值导致typeError，可以通过&& 运算符避免

		var obj = {}  
		obj.b  =>  undefined  
		obj.b.a  => typeError  
		obj.b && obj.b.a   => undefined
		
### 更新
赋值语句可以更新已存在的属性名，如果未存在则扩充到改对象

### 引用
对象通过引用来传递，它们永远不会被拷贝。

### 原型
* 检索原型链的过程成为委托。  
* 原型关系是一种动态的关系，添加一个新的属性到原型中，该属性会立即对所有基于该原型创建的对象可见。

### 反射
> 窥探对象内部结构的方法就叫做反射。
反射的目标是数据 （for in 、 hasOwnProperty）

### 枚举
for in 、 hasOwnProperty，可以用typeof来排除函数。  
由于for in枚举是无序的，可以讲对象的属性名放置在数组中，然后再遍历

### 删除
delete 删除对象的属性，但是不会触及原型链中的任何对象

### 减少全局变量污染
最小化使用全局变量的一个方法是创建为一个亿全局变量


## 函数
* 函数也是对象
* 函数对象连接到Function.prototype
* 函数可以存放在变量、对象和数组中。函数可以当作函数传递给其他函数，函数也可以返回函数。

### 函数字面量
		var func = function(){}
		
### 调用
调用一个函数将暂停当前函数的执行，传递控制权和参数给新函数，出了接受声明时定义的形参，还接受两个附加的参数this 和arguements。  
参数值不会进行类型检查，任何类型的值都可以被传递给参数。  
函数调用  
1. 方法调用模式  this返回调用这个方法的对象  
2. 函数调用模式		返回全局变量，即global对象  
3. 构造器调用模式	返回new出的新对象  
4. apply调用模式  

### 参数
函数参数在初始化时直接赋值

### 返回
一个函数总会返回一个值，如果未指定，则返回undefined。  
如果函数以new方式调用，且返回值不是一个对象，则返回this（该新对象）

### 异常
throw语句中断函数的执行，抛出一个exception对象，包含name属性和message属性，该对象将被传递到一个try语句和catch从句

### 给类型增加方法
给原型添加新的方法时，新的方法将被赋予到所有对象实例上，哪个是在方法被创建之前就创建好了的。

### 递归

### 作用域

### 闭包
		for(i=0;i<10;i++){
			obj[i].onclick = function(){}
		}
事件处理函数绑定的变量i不是函数在构造时的i

### 回调
回调处理异步请求

### 模块
模块的一般形式是，一个定义了私有变量和函数的函数，利用闭包创建可以访问私有变量和函数的特权函数，最后返回这个特权函数，活着把它们保存到一个可访问到的地方。

### 级联
设置返回值为this，实现链式调用

### 套用
> ?

### 记忆
> ?

## 继承
### 伪类
	child.prototype = new Parent()  
缺点：没有私有变量，所有属性都是公开的，无法访问父类的方法

### 对象说明符
运用对象说明符替换构造器需要传递的参数

### 原型
	Object.create()
基于原型的继承

### 函数化
> ?

### 部件
> ?


##数组
### 数组字面量
数组可以包含任意混合类型的值

### 长度
数组的length是没有上届的。  
通过数组length的取值可以增删数组元素

### 删除
delete 删除将产生空位，可以用slice方法。

### 枚举

### 混淆的地方
数组和对象

### 方法

### 维度


## 正则表达式


## 方法





















