Undefined类型，Null类型，Boolean类型：
	对未初始化和未声明的变量执行 typeof 操作符都返回了 undefined 值；

null：空对象指针。

Boolean类型，任何非空字符串，非零数字值，非null对象都返回true。

Number类型：
	在进行算术计算时，所有以八进制和十六进制表示的数值最终都将被转换成十进制数值。
	ECMAScript 定义了 isNaN()函数。这个函数接受一个参数，该参数可以是任何类型，而函数会帮我们确定这个参数是否“不是数值”。
	有 3 个函数可以把非数值转换为数值：Number()、parseInt()和parseFloat()。第一个函数，即转型函数 Number()可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。都会自动忽略前导0。

由于 Number()函数在转换字符串时比较复杂而且不够合理，因此在处理整数的时候更常用的是parseInt()函数。parseInt()转换的时候最好明确指定基数。

一元加操作符的操作与 Number()函数相同。

//操作符
逻辑&& ，|| 都是短路操作符，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值。


//语句
for in与for的区别在于，for in是无序的。

函数：
	在函数体内可以通过arguments对象来访问这个参数数组，arguments 对象只是与数组类似。
	arguments对象中的值会自动反映到对应的命名参数。
	arguments 对象的长度是由传入的参数个数决定的，不是由定义函数时的命名参数的个数决定的。
	没有传递值的命名参数将自动被赋予 undefined 值。
	arguements对象还有一个名叫callee的属性，该属性是一个指针，指向拥有这个 arguments 对象的函数。

基本类型和引用类型：
	当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。
	ECMAScript 中所有函数的参数都是按值传递的。把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样。
	（传递参数，传递引用类型的值？P71）


this：
	指向调用当前函数的对象。
	当在全局作用域中调用一个函数时，this 对象总是指向 Global 对象。

执行环境和作用域：
	执行环境定义了变量或函数有权访问的其他数据。每个执行环境都有一个与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中。解析器在处理数据时在后台使用的是变量对象。
	当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。

//OOP
//Object
所有引用类型的值都是 Object 的实例。
Object的每个实例都具有的属性和方法。constructor，hasOwnProperty(propertyName)，isPrototypeOf(object)，propertyIsEnumerable(propertyName)，toLocaleString()，toString()，valueOf()。

//原型对象
只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个 prototype属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。

创建了自定义的构造函数之后，其原型对象默认只会取得 constructor 属性；至于其他方法，则都是从Object继承而来的。

我们创建的每个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按照字面意思来理解，那么prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。
当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性[[Prototype]]），指向构造函数的原型对象。

Object.getPrototypeOf()返回的对象实际就是这个对象的原型。
使用hasOwnProperty()方法可以检测一个属性是存在于实例中,还是存在于原型中。

Object.getOwnPropertyDescriptor()方法只能用于实例属性，要取得原型属性的描述符，必须直接在原型对象上调用 Object.getOwnPropertyDescriptor()方法。

同时使用 hasOwnProperty()方法和in操作符，就可以确定该属性到底是存在于对象中，还是存在于原型中。

在使用 for-in 循环时，返回的是所有能够通过对象访问的、可枚举的（enumerated）属性，其中既包括存在于实例中的属性，也包括存在于原型中的属性。屏蔽了原型中不可枚举属性（即将
[[Enumerable]]标记为 false 的属性）的实例属性也会在for-in 循环中返回，因为根据规定，所有开发人员定义的属性都是可枚举的。

Object.keys()（返回一个包含所有可枚举属性的字符串数组。）和Object.getOwnPropertyNames()（返回所有实例属性，无论它是否可枚举，包含了不可枚举的 constructor 属性。）方法都可以用来替代for-in 循环。

//创建对象
工厂模式。
（无法解决对象识别的问题？）
构造函数模式。
（是每个方法都要在每个实例上重新创建一遍。）
原型模式。
（其共享的本性，对于包含引用类型值的属性。）
组合使用构造函数模式与原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。

ECMAScript只支持实现继承，而且其实现继承主要是依靠原型链来实现的。

//继承
//原型链
ECMAScript中描述了原型链的概念，并将原型链作为实现继承的主要方法。其基本思想是利用原
型让一个引用类型继承另一个引用类型的属性和方法。

//函数声明与函数表达式
函数声明提升（function declaration hoisting），变量声明提升。
函数返回值，无return默认返回undefined，
（其他返回，js深入浅出/mooc）
函数表达式：
1.var a=function(){};
2.(function(){})();
3.return function(){}
4 var a=function ab(){};

对象的方法，即函数作为属性对象的值。

//闭包
闭包是指有权访问另一个函数作用域中的变量的函数。

this对象是在运行时基于函数的执行环境绑定的在全局函数中，
this 等于window，而当函数被作为某个对象的方法调用时，this 等于那个对象。不过，匿名函数的执行环境具有全局性，因此其this 对象通常指向 window。
（匿名函数的执行环境具有全局性？）

将函数声明包含在一对圆括号中，表示它实际上是一个函数表达式。

JavaScript将function关键字当作一个函数声明的开始，而函数声明后面不能跟圆括号。然而，函数表达式的后面可以跟圆括号。要将函数声明转换成函数表达式，只要像下面这样给它加上一对圆括号即可。

this指向函数执行时的当前对象，而非声明环境有。指向调用（执行）当前函数的对象。

//模仿块级作用域
(function(){})()

//私有变量,静态私有变量



//

对未初始化和未声明的变量执行 typeof 操作符都返回了 undefined 值；

null：空对象指针。

Boolean类型，任何非空字符串，非零数字值，非null对象都返回true。

在进行算术计算时，所有以八进制和十六进制表示的数值最终都将被转换成十进制数值。
ECMAScript 定义了 isNaN()函数。这个函数接受一个参数，该参数可以
是任何类型，而函数会帮我们确定这个参数是否“不是数值”。
有 3 个函数可以把非数值转换为数值：Number()、parseInt()和parseFloat()。第一个函数，即转型函数 Number()可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。
由于 Number()函数在转换字符串时比较复杂而且不够合理，因此在处理整数的时候更常用的是parseInt()函数。


//事件流
事件处理程序
DOM 0级：将一个函数赋值给一个事件处理程序属性。
DOM 2级：用于处理指定和删除事件处理程序的操作addEventListener()和removeEventListener()。

大多数情况下，都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各种浏览
器。

IE678 IE 实现了与 DOM 中类似的两个方法：attachEvent()和 detachEvent()。这两个方法接受相同的两个参数。事件加on。
且事件在全剧作用域中执行。

事件对象
在触发 DOM 上的某个事件时，会产生一个事件对象event，这个对象中包含着所有与事件有关的信息。
function(event){
    return event ? event : window.event;
}

阻止事件默认行为： 
function(event){
     if (event.preventDefault){
         event.preventDefault();
     } else {
        event.returnValue = false;
     }
}

## 面向对象
### 理解对象
> 每个对象都是基于一个引用类型创建的。

#### 属性类型

#### 定义多个属性

#### 读取属性的特性


### 创建对象
#### 工厂模式

		function person(name, age, job){
			var o = new Object();
			o.name = name;
			o.age = age;
			o.job = job;
			o.sayName = function(){
				alert(this.name);
			}
			return o;
		}
		var person1 = person('Dean', 24, 'coder');

无法解决对象识别问题，即怎样知道一个对象的类型

#### 构造函数模式
		
		function Person(name, age, job){
			this.name = name;
			this.age = age;
			this.job = job;
			this.sayName = function(){
				alert(this.name);
			}
		}
		var person1 = new Person('Dean', 24, 'coder');
		
构造函数里的方法都会在实例上重新创建一遍，即
		
		function Person(name, age, job){
			this.name = name;
			this.age = age;
			this.job = job;
			this.sayName = sayName();
			}
		}
		function sayName(){
			alert(this.name);
		}
以这种方式创建函数，会导致不同的作用域链和标识符解析，不同实例上的同名函数是不相等的

#### 原型模式
* 我们创建的每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。  
* 实例里的属性屏蔽了原型上的属性时，只有用 delete 操作符才能完全删除实例的属性。
* 实例与原型之间的连接是一个指针，而非一个副本，所以对原型的修改，会立即反应在实例上。

		function Person(){}
		Person.prototype.name = 'Dean';
		Person.prototype.age = '24';
		Person.prototype.job = 'coder';
		Person.prototype.sayName = function(){
			alert(this.name);
		};
		var person1 = new Person();
		
> 重写原型对象 

		Person.prototype = {
			name: 'Dean',
			age: ,
			job: ,
			friends = ['f1',''f2],
			sayName: function(){}
		}
		
重写后原型对象和默认的prototype对象是两个不同的对象，且会切断现有实例与新原型的联系。  

原型模式无法传递参数，且对于包含引用类型的属性来说，所有实例都指向同一个对象。

#### 组合使用构造函数模式和原型模式
> 最常用的模式，用来定义引用类型的一种默认模式

		function Person(name, age, job){
			this.name = name;
			this.age = age;
			this.job = job;
			this.friends = ['f1','f2'];
		}
		Person.prototype ={
			constructor: Person,
			sayName: function(){}			
		}
		var person1 = new Person('Dean', 29, 'coder');
		
#### 动态原型模式
把所有信息都封装在了构造函数中，而通过在构造函数中初始化原型（仅在必要的情况下），又保持了同时使用构造函数和原型的优点。

		function Person(name, age, job){
			this.name = name;
			this.age = age;
			this.job = job;
			this.friends = ['f1','f2'];
			if(typeof this.sayName != "function"){
				Person.prototype.sayName = function(){}
			}
		}

#### 寄生构造函数模式

		function Person(name, age, job){
			var o = new Object();
			o.name = name;
			o.age = age;
			o.job = job;
			o.sayName =function(){}
			return o;
		}
		var person1 = new Person('dean', 24, 'coder')

返回的对象与构造函数或者与构造函数的原型属性之间没有关系

#### 稳妥构造函数模式
稳妥对象最适合在一些安全的环境中（这些环境中会禁止使用 this 和 new）

		function Person(name, age, job){
			var o = new Object();
			o.sayName =function(){}
			return o;
		}
		var person1 = new Person('dean', 24, 'coder')


### 继承
#### 原型链
* 通过原型链实现继承时，不能使用对象字面量创建原型方法。因为这样做就会重写原型链。  
* 给原型添加方法的代码一定要放在替换原型的语句之后。
* 在通过原型来实现继承时，原型实际上会变成另一个类型的实例，原先的实例属性也就顺理成章地变成了现在的原型属性了。

		function SuperType(){
			this.property = true;
		}
		SuperType.prototype.getSuperVal = function(){}
		
		function SubType(){
			this.subProperty =false;
		}
		
		SubType.protype = new SuperType();
		
		SubType.Prototype.getSuberVal =function(){}

引用类型在继承的问题。  
在创建子类型的实例时，不能向超类型的构造函数中传递参数。

#### 借用构造函数
通过使用 apply()和 call()方法在子类型构造函数的内部调用超类型构造函数。

		
		function SuperType(name){
			this.property = true;
			this.name;
		}
		function SubType(){
			this.subProperty =false;
			SuperType.call(this,'dean');
		}
通过这种方法，SubType的实例会拥有超类型函数属性的副本。  

方法都在构造函数中定义，因此函数复用就无从谈起了。而且，在超类型的原型中定义的方法，对子类型而言也是不可见的，结果所有类型都只能使用构造函数模式。

#### 组合继承
> JavaScript 中最常用的继承模式  

使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承

		function SuperType(name){
			this.name = name;
			this.colors = ["red", "blue", "green"];
		}
		SuperType.prototype.sayName = function(){}
		function SubType(name, age){
			SuperType.call(this, name);
			this.age = age;
		} 

#### 原型式继承










  